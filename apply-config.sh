#!/bin/bash

# LLM Chat System 配置应用脚本
# 自动将 deployment-config.json 中的配置应用到项目各个文件
# 使用方法: ./apply-config.sh [config-file]

set -e

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}"
echo "================================================"
echo "  LLM Chat System - 配置应用工具"
echo "================================================"
echo -e "${NC}"

# 配置文件路径
CONFIG_FILE="${1:-deployment-config.json}"

# 检查配置文件是否存在
if [ ! -f "$CONFIG_FILE" ]; then
    echo -e "${RED}错误: 配置文件不存在: $CONFIG_FILE${NC}"
    echo ""
    echo "使用方法:"
    echo "  1. 复制示例配置: cp deployment-config.example.json deployment-config.json"
    echo "  2. 编辑配置文件: vim deployment-config.json"
    echo "  3. 应用配置: ./apply-config.sh"
    exit 1
fi

# 检查 jq 是否安装
if ! command -v jq &> /dev/null; then
    echo -e "${RED}错误: 需要安装 jq 工具来解析 JSON${NC}"
    echo "安装命令:"
    echo "  Ubuntu/Debian: sudo apt-get install jq"
    echo "  CentOS/RHEL: sudo yum install jq"
    exit 1
fi

echo -e "${GREEN}✓ 找到配置文件: $CONFIG_FILE${NC}"
echo ""

# 读取配置
read_config() {
    local key=$1
    local default=$2
    local value=$(jq -r "$key // \"$default\"" "$CONFIG_FILE")
    echo "$value"
}

# 加载配置
echo -e "${BLUE}[1/8] 加载配置...${NC}"

SERVER_HOST=$(read_config '.server.host' '127.0.0.1')
SERVER_USER=$(read_config '.server.user' 'root')
PROJECT_PATH=$(read_config '.server.project_path' '/opt/llm-chat-v1')

BACKEND_HOST=$(read_config '.backend.host' '0.0.0.0')
BACKEND_PORT=$(read_config '.backend.port' '8000')

LLM_API_URL=$(read_config '.backend.llm.api_url' '')
LLM_MODEL=$(read_config '.backend.llm.model' 'glm4_32B_chat')
LLM_API_KEY=$(read_config '.backend.llm.api_key' '')

DB_URL=$(read_config '.backend.database.url' 'sqlite:///./conversation.db')
DEPLOYMENT_TYPE=$(read_config '.deployment.type' 'docker')

# 统一使用绝对路径（本地和Docker共享）
if [[ "$DB_URL" == sqlite:///./conversation.db ]] || [[ "$DB_URL" == sqlite:///conversation.db ]]; then
    DB_URL="sqlite:///${PROJECT_PATH}/db/conversation.db"
    echo -e "${YELLOW}  ℹ️  数据库路径: $DB_URL${NC}"
fi

JWT_SECRET=$(read_config '.backend.jwt.secret_key' '')
JWT_ALGORITHM=$(read_config '.backend.jwt.algorithm' 'HS256')
JWT_EXPIRE=$(read_config '.backend.jwt.access_token_expire_minutes' '10080')

FRONTEND_PORT=$(read_config '.frontend.port' '3000')
FRONTEND_API_URL=$(read_config '.frontend.api_url' "http://${SERVER_HOST}:${BACKEND_PORT}")

NGINX_ENABLED=$(read_config '.nginx.enabled' 'false')
NGINX_PORT=$(read_config '.nginx.port' '80')
NGINX_SERVER_NAME=$(read_config '.nginx.server_name' '_')
NGINX_BACKEND_PROXY=$(read_config '.nginx.backend_proxy' "http://127.0.0.1:${BACKEND_PORT}")
NGINX_FRONTEND_PROXY=$(read_config '.nginx.frontend_proxy' "http://127.0.0.1:${FRONTEND_PORT}")

AUTO_GENERATE_SECRET=$(read_config '.deployment.auto_generate_secret' 'true')
BACKUP_BEFORE_APPLY=$(read_config '.deployment.backup_before_apply' 'true')

echo -e "${GREEN}✓ 配置加载完成${NC}"
echo ""

# 显示配置摘要
echo -e "${YELLOW}配置摘要:${NC}"
echo "  服务器地址: $SERVER_HOST"
echo "  项目路径: $PROJECT_PATH"
echo "  后端端口: $BACKEND_PORT"
echo "  前端端口: $FRONTEND_PORT"
echo "  Nginx启用: $NGINX_ENABLED"
echo ""

# 确认
read -p "确认应用以上配置? [Y/n]: " CONFIRM
CONFIRM=${CONFIRM:-Y}

if [[ ! $CONFIRM =~ ^[Yy]$ ]]; then
    echo "已取消"
    exit 0
fi

# 备份
if [ "$BACKUP_BEFORE_APPLY" = "true" ]; then
    echo ""
    echo -e "${BLUE}[2/8] 备份现有配置...${NC}"
    BACKUP_DIR="config-backup-$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$BACKUP_DIR"

    [ -f backend/.env ] && cp backend/.env "$BACKUP_DIR/backend.env" && echo "  ✓ backend/.env"
    [ -f frontend/.env.local ] && cp frontend/.env.local "$BACKUP_DIR/frontend.env.local" && echo "  ✓ frontend/.env.local"
    [ -f nginx/default.conf ] && cp nginx/default.conf "$BACKUP_DIR/nginx.conf" && echo "  ✓ nginx/default.conf"
    [ -f deployment/docker/docker-compose.yml ] && cp deployment/docker/docker-compose.yml "$BACKUP_DIR/docker-compose.yml" && echo "  ✓ docker-compose.yml"

    echo -e "${GREEN}✓ 备份已保存到: $BACKUP_DIR${NC}"
fi

# 自动生成 SECRET_KEY
if [ "$AUTO_GENERATE_SECRET" = "true" ] && [ -z "$JWT_SECRET" ] || [ "$JWT_SECRET" = "CHANGE_THIS_TO_RANDOM_STRING_IN_PRODUCTION" ]; then
    echo ""
    echo -e "${BLUE}[3/8] 生成 JWT SECRET_KEY...${NC}"
    JWT_SECRET=$(openssl rand -hex 32)
    echo -e "${GREEN}✓ 已生成随机 SECRET_KEY${NC}"
else
    echo ""
    echo -e "${BLUE}[3/8] 使用配置文件中的 SECRET_KEY${NC}"
fi

# 应用后端配置
echo ""
echo -e "${BLUE}[4/8] 配置后端 (.env)...${NC}"
cat > backend/.env <<EOF
# LLM Chat System Backend Configuration
# Generated by apply-config.sh on $(date)

# 大模型API配置
LLM_API_URL=$LLM_API_URL
LLM_MODEL=$LLM_MODEL
LLM_API_KEY=$LLM_API_KEY

# 数据库配置
DATABASE_URL=$DB_URL

# JWT 安全配置
SECRET_KEY=$JWT_SECRET
ALGORITHM=$JWT_ALGORITHM
ACCESS_TOKEN_EXPIRE_MINUTES=$JWT_EXPIRE

# 服务器配置
HOST=$BACKEND_HOST
PORT=$BACKEND_PORT
EOF
echo -e "${GREEN}✓ backend/.env 已更新${NC}"

# 应用前端配置
echo ""
echo -e "${BLUE}[5/8] 配置前端 (.env.local)...${NC}"
cat > frontend/.env.local <<EOF
# LLM Chat System Frontend Configuration
# Generated by apply-config.sh on $(date)

# 后端 API 地址
NEXT_PUBLIC_API_URL=$FRONTEND_API_URL
EOF
echo -e "${GREEN}✓ frontend/.env.local 已更新${NC}"

# 应用 Nginx 配置
if [ "$NGINX_ENABLED" = "true" ]; then
    echo ""
    echo -e "${BLUE}[6/8] 配置 Nginx...${NC}"
    cat > nginx/default.conf <<EOF
# LLM Chat System Nginx Configuration
# Generated by apply-config.sh on $(date)

server {
    listen $NGINX_PORT;
    server_name $NGINX_SERVER_NAME;

    # 后端 API 路由
    location /api/ {
        proxy_pass $NGINX_BACKEND_PROXY/api/;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;

        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # 对话相关接口
    location /conversations {
        proxy_pass $NGINX_BACKEND_PROXY/conversations;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;

        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # 聊天接口（SSE 流式响应）
    location /chat {
        proxy_pass $NGINX_BACKEND_PROXY/chat;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;

        # SSE 配置
        proxy_buffering off;
        proxy_cache off;
        proxy_set_header Connection '';
        chunked_transfer_encoding off;

        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }

    # WebSocket 支持
    location /ws/ {
        proxy_pass $NGINX_BACKEND_PROXY/ws/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    # 前端页面
    location / {
        proxy_pass $NGINX_FRONTEND_PROXY;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF
    echo -e "${GREEN}✓ nginx/default.conf 已更新${NC}"
else
    echo ""
    echo -e "${BLUE}[6/8] Nginx 未启用，跳过${NC}"
fi

# 应用 Docker 配置
echo ""
echo -e "${BLUE}[7/8] 配置 Docker Compose...${NC}"

# 根据部署类型和Nginx启用状态，智能设置前端API地址
DOCKER_FRONTEND_API_URL="$FRONTEND_API_URL"
if [ "$DEPLOYMENT_TYPE" = "docker" ] && [ "$NGINX_ENABLED" = "true" ]; then
    # Docker部署 + Nginx启用：通过Nginx反向代理，不带端口
    DOCKER_FRONTEND_API_URL="http://${SERVER_HOST}"
    echo -e "${YELLOW}  ℹ️  Docker部署(Nginx启用)，前端API地址: $DOCKER_FRONTEND_API_URL${NC}"
elif [ "$DEPLOYMENT_TYPE" = "docker" ] && [ "$NGINX_ENABLED" = "false" ]; then
    # Docker部署 + Nginx未启用：直接访问后端端口
    DOCKER_FRONTEND_API_URL="http://${SERVER_HOST}:${BACKEND_PORT}"
    echo -e "${YELLOW}  ℹ️  Docker部署(Nginx未启用)，前端API地址: $DOCKER_FRONTEND_API_URL${NC}"
fi

# Docker Compose 配置已经使用相对路径，不需要修改文件内容
# 只需要确保环境变量正确传递
cat > deployment/docker/.env <<EOF
# Docker Compose Environment Variables
# Generated by apply-config.sh on $(date)

# Backend
LLM_API_URL=$LLM_API_URL
LLM_MODEL=$LLM_MODEL
LLM_API_KEY=$LLM_API_KEY
SECRET_KEY=$JWT_SECRET

# Frontend (用于Docker构建时传入)
FRONTEND_API_URL=$DOCKER_FRONTEND_API_URL
EOF
echo -e "${GREEN}✓ deployment/docker/.env 已创建${NC}"

# 应用 Systemd 配置
echo ""
echo -e "${BLUE}[8/8] 配置 Systemd 服务...${NC}"

cat > deployment/local/systemd/llm-chat-backend.service <<EOF
[Unit]
Description=LLM Chat System Backend Service
After=network.target

[Service]
Type=simple
User=$SERVER_USER
WorkingDirectory=$PROJECT_PATH/backend
Environment="PATH=/usr/bin:/usr/local/bin"
ExecStart=/usr/bin/python3 -m uvicorn main:app --host $BACKEND_HOST --port $BACKEND_PORT
Restart=always
RestartSec=10

# 日志配置
StandardOutput=append:$PROJECT_PATH/logs/backend.log
StandardError=append:$PROJECT_PATH/logs/backend-error.log

[Install]
WantedBy=multi-user.target
EOF

cat > deployment/local/systemd/llm-chat-frontend.service <<EOF
[Unit]
Description=LLM Chat System Frontend Service
After=network.target

[Service]
Type=simple
User=$SERVER_USER
WorkingDirectory=$PROJECT_PATH/frontend
Environment="PATH=/usr/bin:/usr/local/bin"
Environment="NODE_ENV=production"
ExecStart=/usr/bin/npm start
Restart=always
RestartSec=10

# 日志配置
StandardOutput=append:$PROJECT_PATH/logs/frontend.log
StandardError=append:$PROJECT_PATH/logs/frontend-error.log

[Install]
WantedBy=multi-user.target
EOF

echo -e "${GREEN}✓ Systemd 服务文件已更新${NC}"

# 完成
echo ""
echo -e "${BLUE}================================================${NC}"
echo -e "${GREEN}✅ 配置应用完成！${NC}"
echo -e "${BLUE}================================================${NC}"
echo ""

echo -e "${YELLOW}后续步骤:${NC}"
echo ""
echo "1. Docker 部署:"
echo "   cd deployment/docker"
echo "   docker compose up -d"
echo ""
echo "2. 本地部署:"
echo "   cd deployment/local"
echo "   ./start.sh"
echo ""
echo "3. 使用 Systemd (需要 root 权限):"
echo "   sudo cp deployment/local/systemd/*.service /etc/systemd/system/"
echo "   sudo systemctl daemon-reload"
echo "   sudo systemctl enable llm-chat-backend llm-chat-frontend"
echo "   sudo systemctl start llm-chat-backend llm-chat-frontend"
echo ""
echo -e "${YELLOW}访问地址:${NC}"
if [ "$NGINX_ENABLED" = "true" ]; then
    echo "  http://$SERVER_HOST:$NGINX_PORT"
else
    echo "  前端: http://$SERVER_HOST:$FRONTEND_PORT"
    echo "  后端: http://$SERVER_HOST:$BACKEND_PORT"
fi
echo ""
