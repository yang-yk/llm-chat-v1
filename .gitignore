# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
*.egg-info/
dist/
build/

# Node
node_modules/
.next/
out/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db

# Database
*.db
*.db-journal
*.sqlite
*.sqlite3

# Logs
logs/
*.log

# Environment
.env
.env.local
.env.*.local

# Project specific
backend/conversation.db
backend/server.log
frontend/.next/
frontend/out/

# Docker deployment generated files
docker-compose.override.yml
docker-start.sh
docker-stop.sh
docker-restart.sh
docker-status.sh
docker-logs.sh
nginx/nginx-docker.conf

# Service management scripts (generated by deploy.sh)
start-services.sh
stop-services.sh
restart-services.sh
status-services.sh
*.pid

# Offline deployment - large binary files
offline-deployment/*.tar
offline-deployment/*.tgz
offline-deployment/docker-*.tgz

# 离线部署包（太大，不推送到 GitHub）
llm-chat-offline-*.tar.gz
offline-deployment-package/*.tar
offline-deployment-package/*.tar.gz

# Docker 构建缓存（太大，不推送到 GitHub）
docker-build-cache/*.tar
docker-build-cache/*.tar.gz
docker-build-cache/pip-cache/
docker-build-cache/npm-cache/
docker-build-cache/cache-manifest.txt
docker-build-cache/import-build-cache.sh
