#!/bin/bash

# LLM Chat System Docker 一键部署脚本
# 使用方法: ./docker-deploy.sh

set -e  # 遇到错误立即退出

echo "========================================="
echo "  LLM Chat System Docker 一键部署"
echo "========================================="
echo ""

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 检查是否在deployment/docker目录
if [ ! -f "docker-compose.yml" ]; then
    echo -e "${RED}错误: 请在 deployment/docker 目录运行此脚本${NC}"
    echo -e "${YELLOW}提示: cd deployment/docker && ./docker-deploy.sh${NC}"
    exit 1
fi

# 检查项目根目录是否存在
if [ ! -d "../../backend" ] || [ ! -d "../../frontend" ]; then
    echo -e "${RED}错误: 未找到 backend 或 frontend 目录${NC}"
    echo -e "${YELLOW}请确保在正确的项目目录结构中运行此脚本${NC}"
    exit 1
fi

# 检查 Docker 是否安装
echo -e "${BLUE}[1/8] 检查环境...${NC}"
if ! command -v docker &> /dev/null; then
    echo -e "${RED}错误: 未检测到 Docker${NC}"
    echo "请先安装 Docker: https://docs.docker.com/engine/install/"
    exit 1
fi

# 检查 docker-compose 是否安装（兼容 V1 和 V2）
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE="docker-compose"
elif docker compose version &> /dev/null; then
    DOCKER_COMPOSE="docker compose"
else
    echo -e "${RED}错误: 未检测到 docker-compose 或 docker compose${NC}"
    echo "请先安装 Docker Compose: https://docs.docker.com/compose/install/"
    exit 1
fi

echo -e "${GREEN}✓ Docker 环境检查通过${NC}"
echo ""

# 询问配置信息
echo -e "${BLUE}[2/8] 配置部署参数...${NC}"
echo ""

read -p "服务器 IP 地址或域名 [localhost]: " SERVER_HOST
SERVER_HOST=${SERVER_HOST:-localhost}

read -p "后端服务端口 [8000]: " BACKEND_PORT
BACKEND_PORT=${BACKEND_PORT:-8000}

read -p "前端服务端口 [3000]: " FRONTEND_PORT
FRONTEND_PORT=${FRONTEND_PORT:-3000}

echo ""
echo -e "${YELLOW}是否启用 Nginx 反向代理? (推荐生产环境) [y/N]:${NC}"
read -p "" ENABLE_NGINX
ENABLE_NGINX=${ENABLE_NGINX:-N}

NGINX_PORT=80
if [[ $ENABLE_NGINX =~ ^[Yy]$ ]]; then
    read -p "Nginx HTTP 端口 [80]: " NGINX_PORT
    NGINX_PORT=${NGINX_PORT:-80}
fi

echo ""
echo -e "${YELLOW}是否生成新的 JWT SECRET_KEY? (推荐) [Y/n]:${NC}"
read -p "" GENERATE_KEY
GENERATE_KEY=${GENERATE_KEY:-Y}

if [[ $GENERATE_KEY =~ ^[Yy]$ ]]; then
    SECRET_KEY=$(openssl rand -hex 32)
    echo -e "${GREEN}已生成新的 SECRET_KEY${NC}"
else
    read -p "请输入 SECRET_KEY: " SECRET_KEY
fi

echo ""
echo "========================================="
echo "配置信息确认:"
echo "----------------------------------------"
echo "服务器地址: $SERVER_HOST"
echo "后端端口: $BACKEND_PORT"
echo "前端端口: $FRONTEND_PORT"
if [[ $ENABLE_NGINX =~ ^[Yy]$ ]]; then
    echo "Nginx 端口: $NGINX_PORT (已启用)"
else
    echo "Nginx: 未启用"
fi
echo "SECRET_KEY: ${SECRET_KEY:0:10}..."
echo "========================================="
echo ""
read -p "确认以上配置正确? [Y/n]: " CONFIRM
CONFIRM=${CONFIRM:-Y}

if [[ ! $CONFIRM =~ ^[Yy]$ ]]; then
    echo "部署已取消"
    exit 0
fi

# 创建必要的目录
echo ""
echo -e "${BLUE}[3/8] 创建必要的目录...${NC}"
mkdir -p logs
mkdir -p backend/logs
mkdir -p frontend/logs

# 创建 .env 文件
echo -e "${BLUE}[4/8] 生成 Docker 环境变量配置...${NC}"
cat > .env <<EOF
# Docker Compose 环境变量
# Generated by docker-deploy.sh on $(date)

# JWT 配置
SECRET_KEY=$SECRET_KEY

# 端口配置
BACKEND_PORT=$BACKEND_PORT
FRONTEND_PORT=$FRONTEND_PORT
EOF

# 创建 docker-compose 配置
cat > docker-compose.override.yml <<EOF
version: '3.8'

services:
  backend:
    ports:
      - "$BACKEND_PORT:8000"
    environment:
      - SECRET_KEY=$SECRET_KEY

  frontend:
    ports:
      - "$FRONTEND_PORT:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://$SERVER_HOST:$BACKEND_PORT
EOF

# 如果启用 Nginx，添加配置
if [[ $ENABLE_NGINX =~ ^[Yy]$ ]]; then
    # 更新 Nginx 配置
    mkdir -p nginx
    cat > nginx/nginx-docker.conf <<EOF
upstream backend_server {
    server backend:8000;
}

upstream frontend_server {
    server frontend:3000;
}

server {
    listen 80;
    server_name $SERVER_HOST;

    location / {
        proxy_pass http://frontend_server;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
    }

    location /api/ {
        proxy_pass http://backend_server/api/;
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_read_timeout 300s;
    }

    location /auth/ {
        proxy_pass http://backend_server/auth/;
    }

    location /docs {
        proxy_pass http://backend_server/docs;
    }
}
EOF

    # 添加 Nginx 服务到 docker-compose
    cat >> docker-compose.override.yml <<EOF

  nginx:
    image: nginx:alpine
    container_name: llm-chat-nginx
    ports:
      - "$NGINX_PORT:80"
    volumes:
      - ./nginx/nginx-docker.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - llm-chat-network
EOF

    echo -e "${GREEN}✓ Nginx 反向代理已配置${NC}"
fi

echo -e "${GREEN}✓ 配置文件已创建${NC}"

# 构建 Docker 镜像
echo ""
echo -e "${BLUE}[5/8] 构建 Docker 镜像...${NC}"
$DOCKER_COMPOSE build

# 启动容器
echo ""
echo -e "${BLUE}[6/8] 启动 Docker 容器...${NC}"
$DOCKER_COMPOSE up -d

# 等待服务启动
echo ""
echo -e "${BLUE}[7/8] 等待服务启动...${NC}"
sleep 5

# 检查服务状态
echo ""
echo -e "${BLUE}[8/8] 检查服务状态...${NC}"
$DOCKER_COMPOSE ps

# 创建管理脚本
echo ""
echo -e "${GREEN}创建 Docker 管理脚本...${NC}"

# Docker 启动脚本
cat > docker-start.sh <<'EOF'
#!/bin/bash
echo "启动 LLM Chat System (Docker)..."
docker compose up -d
echo "服务已启动"
docker compose ps
EOF

# Docker 停止脚本
cat > docker-stop.sh <<'EOF'
#!/bin/bash
echo "停止 LLM Chat System (Docker)..."
docker compose down
echo "服务已停止"
EOF

# Docker 重启脚本
cat > docker-restart.sh <<'EOF'
#!/bin/bash
echo "重启 LLM Chat System (Docker)..."
docker compose restart
echo "服务已重启"
docker compose ps
EOF

# Docker 状态脚本
cat > docker-status.sh <<'EOF'
#!/bin/bash
echo "LLM Chat System 服务状态 (Docker):"
echo "========================================="
docker compose ps
echo ""
echo "容器资源占用:"
docker stats --no-stream $(docker compose ps -q)
EOF

# Docker 日志脚本
cat > docker-logs.sh <<'EOF'
#!/bin/bash
if [ -z "$1" ]; then
    echo "查看所有服务日志..."
    docker compose logs -f
else
    echo "查看 $1 服务日志..."
    docker compose logs -f $1
fi
EOF

# 赋予执行权限
chmod +x docker-start.sh docker-stop.sh docker-restart.sh docker-status.sh docker-logs.sh

echo -e "${GREEN}✓ 管理脚本已创建${NC}"

# 完成部署
echo ""
echo "========================================="
echo -e "${GREEN}  🎉 部署完成!${NC}"
echo "========================================="
echo ""

if [[ $ENABLE_NGINX =~ ^[Yy]$ ]]; then
    echo "访问地址:"
    echo "  ${GREEN}主站: http://$SERVER_HOST:$NGINX_PORT${NC}"
    echo "  后端直连: http://$SERVER_HOST:$BACKEND_PORT/docs"
else
    echo "访问地址:"
    echo "  ${GREEN}前端: http://$SERVER_HOST:$FRONTEND_PORT${NC}"
    echo "  ${GREEN}后端: http://$SERVER_HOST:$BACKEND_PORT/docs${NC}"
fi

echo ""
echo "Docker 管理命令:"
echo "  启动服务: ${BLUE}./docker-start.sh${NC} 或 ${BLUE}docker compose up -d${NC}"
echo "  停止服务: ${BLUE}./docker-stop.sh${NC} 或 ${BLUE}docker compose down${NC}"
echo "  重启服务: ${BLUE}./docker-restart.sh${NC} 或 ${BLUE}docker compose restart${NC}"
echo "  查看状态: ${BLUE}./docker-status.sh${NC} 或 ${BLUE}docker compose ps${NC}"
echo "  查看日志: ${BLUE}./docker-logs.sh${NC} 或 ${BLUE}docker compose logs -f${NC}"
echo "  查看特定服务日志: ${BLUE}./docker-logs.sh backend${NC}"
echo ""
echo "容器管理:"
echo "  进入后端容器: ${BLUE}docker compose exec backend bash${NC}"
echo "  进入前端容器: ${BLUE}docker compose exec frontend sh${NC}"
echo "  查看资源占用: ${BLUE}docker stats${NC}"
echo ""
echo -e "${YELLOW}注意事项:${NC}"
echo "1. 数据库文件: backend/conversation.db (已挂载到宿主机)"
echo "2. 日志文件: logs/ 目录下"
echo "3. 停止容器不会删除数据，使用 'docker compose down -v' 会删除数据卷"
echo "4. 定期备份数据库: cp backend/conversation.db backup/"

if [[ $ENABLE_NGINX =~ ^[Yy]$ ]]; then
    echo "5. Nginx 配置文件: nginx/nginx-docker.conf"
fi

echo ""
echo -e "${GREEN}部署完成，祝您使用愉快！${NC} 🚀"
echo ""
