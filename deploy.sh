#!/bin/bash

# LLM Chat System 生产环境部署脚本
# 使用方法: ./deploy.sh

set -e  # 遇到错误立即退出

echo "========================================="
echo "  LLM Chat System 生产环境部署脚本"
echo "========================================="
echo ""

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# 检查是否在项目根目录
if [ ! -f "README.md" ] || [ ! -d "backend" ] || [ ! -d "frontend" ]; then
    echo -e "${RED}错误: 请在项目根目录运行此脚本${NC}"
    exit 1
fi

# 1. 询问配置信息
echo "请输入部署配置信息:"
echo ""

read -p "服务器 IP 地址或域名: " SERVER_HOST
read -p "后端服务端口 [8000]: " BACKEND_PORT
BACKEND_PORT=${BACKEND_PORT:-8000}

read -p "前端服务端口 [3000]: " FRONTEND_PORT
FRONTEND_PORT=${FRONTEND_PORT:-3000}

echo ""
echo -e "${YELLOW}是否需要生成新的 JWT SECRET_KEY? (推荐) [Y/n]:${NC} "
read -p "" GENERATE_KEY
GENERATE_KEY=${GENERATE_KEY:-Y}

if [[ $GENERATE_KEY =~ ^[Yy]$ ]]; then
    SECRET_KEY=$(openssl rand -hex 32)
    echo -e "${GREEN}已生成新的 SECRET_KEY${NC}"
else
    read -p "请输入 SECRET_KEY: " SECRET_KEY
fi

echo ""
echo "========================================="
echo "配置信息确认:"
echo "----------------------------------------"
echo "服务器地址: $SERVER_HOST"
echo "后端端口: $BACKEND_PORT"
echo "前端端口: $FRONTEND_PORT"
echo "SECRET_KEY: ${SECRET_KEY:0:10}..."
echo "========================================="
echo ""
read -p "确认以上配置正确? [Y/n]: " CONFIRM
CONFIRM=${CONFIRM:-Y}

if [[ ! $CONFIRM =~ ^[Yy]$ ]]; then
    echo "部署已取消"
    exit 0
fi

# 2. 创建必要的目录
echo ""
echo -e "${GREEN}[1/7] 创建必要的目录...${NC}"
mkdir -p logs
mkdir -p backend/logs
mkdir -p frontend/logs

# 3. 配置后端环境变量
echo -e "${GREEN}[2/7] 配置后端环境变量...${NC}"
cat > backend/.env <<EOF
# Production Environment Configuration
# Generated by deploy.sh on $(date)

# 大模型API配置（默认使用 GLM-4）
LLM_API_URL=http://111.19.168.151:11553/v1/chat/completions
LLM_MODEL=glm4_32B_chat
LLM_API_KEY=glm432b

# 数据库配置
DATABASE_URL=sqlite:///./conversation.db

# JWT 安全配置
SECRET_KEY=$SECRET_KEY
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=10080

# 服务器配置
HOST=0.0.0.0
PORT=$BACKEND_PORT
EOF

echo -e "${GREEN}后端配置文件已创建: backend/.env${NC}"

# 4. 配置前端环境变量
echo -e "${GREEN}[3/7] 配置前端环境变量...${NC}"
cat > frontend/.env.local <<EOF
# Production Environment Configuration
# Generated by deploy.sh on $(date)

# 后端 API 地址
NEXT_PUBLIC_API_URL=http://$SERVER_HOST:$BACKEND_PORT
EOF

echo -e "${GREEN}前端配置文件已创建: frontend/.env.local${NC}"

# 5. 安装后端依赖
echo -e "${GREEN}[4/7] 安装后端依赖...${NC}"
cd backend
pip install -r requirements.txt
cd ..

# 6. 安装前端依赖并构建
echo -e "${GREEN}[5/7] 安装前端依赖并构建...${NC}"
cd frontend
npm install
npm run build
cd ..

# 7. 创建服务管理脚本
echo -e "${GREEN}[6/7] 创建服务管理脚本...${NC}"

# 启动脚本
cat > start-services.sh <<'EOF'
#!/bin/bash

echo "启动 LLM Chat System 服务..."

# 启动后端
cd backend
nohup python -m uvicorn main:app --host 0.0.0.0 --port $BACKEND_PORT > ../logs/backend.log 2>&1 &
BACKEND_PID=$!
echo $BACKEND_PID > ../logs/backend.pid
echo "后端服务已启动 (PID: $BACKEND_PID)"
cd ..

# 启动前端
cd frontend
nohup npm start > ../logs/frontend.log 2>&1 &
FRONTEND_PID=$!
echo $FRONTEND_PID > ../logs/frontend.pid
echo "前端服务已启动 (PID: $FRONTEND_PID)"
cd ..

echo "所有服务已启动"
echo "访问地址: http://$(hostname -I | awk '{print $1}'):$FRONTEND_PORT"
EOF

# 替换端口变量
sed -i.bak "s/\$BACKEND_PORT/$BACKEND_PORT/g" start-services.sh
sed -i.bak "s/\$FRONTEND_PORT/$FRONTEND_PORT/g" start-services.sh
rm -f start-services.sh.bak

# 停止脚本
cat > stop-services.sh <<'EOF'
#!/bin/bash

echo "停止 LLM Chat System 服务..."

# 停止后端
if [ -f logs/backend.pid ]; then
    BACKEND_PID=$(cat logs/backend.pid)
    if ps -p $BACKEND_PID > /dev/null; then
        kill $BACKEND_PID
        echo "后端服务已停止 (PID: $BACKEND_PID)"
    fi
    rm -f logs/backend.pid
fi

# 停止前端
if [ -f logs/frontend.pid ]; then
    FRONTEND_PID=$(cat logs/frontend.pid)
    if ps -p $FRONTEND_PID > /dev/null; then
        kill $FRONTEND_PID
        echo "前端服务已停止 (PID: $FRONTEND_PID)"
    fi
    rm -f logs/frontend.pid
fi

echo "所有服务已停止"
EOF

# 重启脚本
cat > restart-services.sh <<'EOF'
#!/bin/bash

echo "重启 LLM Chat System 服务..."
./stop-services.sh
sleep 2
./start-services.sh
EOF

# 状态检查脚本
cat > status-services.sh <<'EOF'
#!/bin/bash

echo "LLM Chat System 服务状态:"
echo "========================================="

# 检查后端
if [ -f logs/backend.pid ]; then
    BACKEND_PID=$(cat logs/backend.pid)
    if ps -p $BACKEND_PID > /dev/null; then
        echo "后端服务: 运行中 (PID: $BACKEND_PID)"
    else
        echo "后端服务: 已停止"
    fi
else
    echo "后端服务: 未启动"
fi

# 检查前端
if [ -f logs/frontend.pid ]; then
    FRONTEND_PID=$(cat logs/frontend.pid)
    if ps -p $FRONTEND_PID > /dev/null; then
        echo "前端服务: 运行中 (PID: $FRONTEND_PID)"
    else
        echo "前端服务: 已停止"
    fi
else
    echo "前端服务: 未启动"
fi

echo "========================================="
EOF

chmod +x start-services.sh stop-services.sh restart-services.sh status-services.sh

echo -e "${GREEN}服务管理脚本已创建:${NC}"
echo "  - start-services.sh    (启动服务)"
echo "  - stop-services.sh     (停止服务)"
echo "  - restart-services.sh  (重启服务)"
echo "  - status-services.sh   (查看状态)"

# 8. 完成部署
echo ""
echo -e "${GREEN}[7/7] 部署完成!${NC}"
echo ""
echo "========================================="
echo "  部署成功!"
echo "========================================="
echo ""
echo "快速启动:"
echo "  ./start-services.sh"
echo ""
echo "访问地址:"
echo "  前端: http://$SERVER_HOST:$FRONTEND_PORT"
echo "  后端: http://$SERVER_HOST:$BACKEND_PORT/docs"
echo ""
echo "服务管理:"
echo "  启动: ./start-services.sh"
echo "  停止: ./stop-services.sh"
echo "  重启: ./restart-services.sh"
echo "  状态: ./status-services.sh"
echo ""
echo "日志文件:"
echo "  后端: logs/backend.log"
echo "  前端: logs/frontend.log"
echo ""
echo -e "${YELLOW}注意事项:${NC}"
echo "1. 确保防火墙已开放端口 $BACKEND_PORT 和 $FRONTEND_PORT"
echo "2. 生产环境建议使用 Nginx 反向代理"
echo "3. 建议配置 systemd 服务以实现开机自启"
echo "4. 定期备份数据库文件: backend/conversation.db"
echo ""
